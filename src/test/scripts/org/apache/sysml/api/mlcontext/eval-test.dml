#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------


# product between matrix and scalar
f1 = function (matrix[double] M, double factor) return (double res) {
    res = prod(M) * factor
}

# replace the matrix with a scalar and then use calculate the product
f2 = function (matrix[double] M, double r) return (double res) {
    R = replace(target=M, pattern=1, replacement=r)
    res = f1(R, 10)
}

# production of two matrix
f3 = function (matrix[double] M1, matrix[double] M2) return (matrix[double] res) {
    res = M1 %*% M2
}

# some variables
X = matrix("1 2 3 4", rows=2, cols=2)
y = 10

# create a result matrix
R = matrix(1, rows=2, cols=1)

R[1, 1] = eval(f1, X, y)
R[2, 1] = eval(f2, X, y)

print(toString(R))

M3 = eval(f3, X, X)
print(toString(M3))


# a function frame
#F = read("func.csv", data_type="frame", rows=2, cols=1, format="csv")
#parfor(i in 1:nrow(F))
#    R[i, ] = eval(F[i,1], X, y);